<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="Content-Security-Policy" content="default-src 'self' http: https: ws: wss: 'unsafe-inline';">
</head>
<body>
<style name="assets/fonts.css" type="text/css">/* inter-regular - latin */
@font-face {
  font-family: 'Inter';
  font-style: normal;
  font-weight: 400;
  src: url('assets/fonts/inter-v8-latin-regular.eot'); /* IE9 Compat Modes */
  src: local(''),
       url('assets/fonts/inter-v8-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
       url('assets/fonts/inter-v8-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */
       url('assets/fonts/inter-v8-latin-regular.woff') format('woff'), /* Modern Browsers */
       url('assets/fonts/inter-v8-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */
       url('assets/fonts/inter-v8-latin-regular.svg#Inter') format('svg'); /* Legacy iOS */
}

/* inter-600 - latin */
@font-face {
  font-family: 'Inter';
  font-style: normal;
  font-weight: 600;
  src: url('assets/fonts/inter-v8-latin-600.eot'); /* IE9 Compat Modes */
  src: local(''),
       url('assets/fonts/inter-v8-latin-600.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
       url('assets/fonts/inter-v8-latin-600.woff2') format('woff2'), /* Super Modern Browsers */
       url('assets/fonts/inter-v8-latin-600.woff') format('woff'), /* Modern Browsers */
       url('assets/fonts/inter-v8-latin-600.ttf') format('truetype'), /* Safari, Android, iOS */
       url('assets/fonts/inter-v8-latin-600.svg#Inter') format('svg'); /* Legacy iOS */
}


</style>
<style name="assets/style.css" type="text/css">* { box-sizing: border-box; margin: 0; padding: 0; line-height: 1.5; }

body { color: #123; font-size: 16px; font-family: "Inter", sans-serif; }
body { background-color: #f0f0f0; background-image: url('assets/bg.svg'); background-repeat: repeat; }

body > header {
  text-align: center;
  max-width: 80rem;
  margin: 0 auto;
  padding: 2rem 2rem 1rem;
}
body > header { display: flex; flex-flow: row nowrap; justify-content: space-around; align-items: center; }
body > header .logo, .logo img { display: block; margin: 0; flex-shrink: 1; }
body > header .logo img { max-width: 16rem; max-height: 16rem; }
body > header .badges { margin-bottom: 1rem; }
body > header a.badge { display: inline-block; padding: 0.25rem 0.5rem; }

section { padding: 1em; }

footer { padding: 1em; }

a { text-decoration: none; }
a:hover { text-decoration: underline; }
a, a:focus, a:visited, a:active, a:hover { color: rgb(101, 179, 76) }

h1, h2, h3, h4 { font-weight: 600 }
h1 { font-size: 3em;     line-height: 3rem;   margin-bottom: 2rem;                     }
h2 { font-size: 1.75em;  line-height: 2rem;   margin-bottom: 1rem;   margin-top: 0;    }
h3 { font-size: 1.5rem;  line-height: 2rem;   margin-bottom: 1rem;                     }
h4 { font-size: 1.25em;  line-height: 1.5rem; margin-bottom: 0.5rem; margin-top: 2rem; }
h5 { font-size: 1.125em; line-height: 1.5rem; margin-bottom: 0.5rem; margin-top: 2rem; }

button, .button {
  display: inline-block;
  background: rgb(101, 179, 76);
  color: white;
  padding: 0 1em;
  margin: 1em 0;
  text-shadow: -1px -1px 0 black;
  box-shadow: 1px 1px 0 black;
}
a.button:focus, a.button:visited, a.button:active, a.button:hover {
  color: white;
}

table { width: 50%; width: 50vw; margin: 0 auto 5em; }
th, td { text-align: left; vertical-align: top; }
th { padding-right: 5em }

.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  flex-flow: row wrap;
  justify-content: center;
  max-width: 80rem;
  margin: 0 auto 3rem;
}

@media (max-width: 80rem) {
  .grid {
    display: flex;
    flex-flow: column nowrap;
  }
  .grid .feature {
    display: flex;
    flex-flow: row nowrap;
  }
  .grid .feature .links {
    flex-shrink: 0;
    width: 33%;
    margin: 0 0 0 2rem;
  }
  .table-of-contents {
    width: 1rem;
  }
}

@media (max-width: 48rem) {
  .grid .feature .links {
    width: 50%;
  }
}

.big-left { grid-column-start: 1; grid-column-end: 3; }
.big-center { grid-column-start: 2; grid-column-end: 4; }
.big-right { grid-column-start: 3; grid-column-end: 5; }
.big-all { grid-column-start: 1; grid-column-end: 5; }

.feature {
  padding: 1rem;
  margin: 1rem 0.5rem 0;
  border: 1px solid rgba(0,0,0,0.1);
  border-top-color: rgba(255,255,255,0.5);
  border-left-color: rgba(255,255,255,0.5);
  border-radius: 3px;
  box-shadow: 3px 3px 6px rgba(0,0,0,0.1);
  display: flex;
  flex-flow: column nowrap;
  background: #fff;
}

.feature .docs {
  font-weight: bold;
}

#features .feature {
  min-height: 10rem;
}

.left {
  text-align: left;
}
.center {
  text-align: center;
}

.feature .description {
  line-height: 1.5;
  font-size: 0.875rem;
}

code.inline,
code.block {
  background:  #0c5749;
  color:       white;
  font-family: monospace;
  font-weight: bold;
}

code.inline {
  display: inline-block;
  padding: 0.5rem 1rem;
  margin: 0 0.5rem;
}

code.block {
  display: block;
  padding:     1rem;
  margin:        1rem auto;
  border-radius: 0.5rem;
  max-width:     40rem;
  line-height:   1rem;
}

.feature-logo {
  margin-bottom: 0.5rem;
  height:        5rem;
  width:         12rem;
  align-self:    center;
}

.tag {
  font-size: 0.8rem;
  background: #f5faf3;
  border: 1px solid #437733;
  color: #437733;
  display: inline-block;
  padding: 0.25rem 0.5rem;
  margin: 0.5rem 0 0;
  align-self: flex-start;
  border-radius: 3px;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.spacer {
  flex-grow:  1;
  min-height: 0.5rem;
}

pre, code {
  font-family: monospace;
}

p {
  line-height: 1.5rem;
  margin-top: 0;
  margin-bottom: 0.5rem;
}

svg.icon {
  width: 2rem;
  height: 2rem;
}
a > svg.icon {
  fill: rgb(101, 179, 76);
  width: 1.5rem;
  height: 1.5rem;
  line-height: 1rem;
  vertical-align: baseline;
  margin-right: 0.5rem;
  flex-shrink: 0;
}
.feature a.docs {
  display: flex;
  flex-flow: row nowrap;
  align-items: flex-start;
  font-weight: normal;
  text-decoration: none;
  padding: 0.5rem 0;
  cursor: default;
  color: #888;
}
.feature a.docs[href] {
  text-decoration: underline;
  color: rgb(67, 119, 51);
  cursor: pointer;
}

@keyframes hourglass {
  50%  { transform: rotateZ(0);      }
	100% { transform: rotateZ(180deg); }
}

svg.icon-todo {
  animation-name: hourglass;
  animation-duration: 3s;
  animation-delay: 1s;
  animation-iteration-count: infinite;
}

.links {
  display: flex;
  flex-flow: column nowrap;
}
.links > a {
  margin-right: 1rem;
  transition:
    padding-left 0.33s,
    margin-right 0.33s;
}
.links > a[href]:hover {
  padding-left: 0.5rem;
  margin-right: 0.5rem;
}
.feature pre {
  background: #eee;
  padding: 0.5rem;
  border-radius: 0.1rem;
  font-size: 0.875rem;
  font-weight: normal;
  margin-top: 1rem;
  color: #555;
}

/*.feature .links .icon { fill: #F46623 }*/

.feature.invert { background: rgb(67, 119, 51); color: white; }
.feature.invert * { color: white; fill: white; }
.feature.invert a.docs { color: white; }
.feature.invert a.docs[href] { text-decoration: underline; }

.feature.foss { background: #2e0056; color: white; }
.feature.foss * { color: white; fill:  white; }
.feature.foss a.docs { color: white; }

.icon-todo { fill: #aaa !important; }

#quick-start {
  text-align: center;
  flex-grow: 1;
}

.ensuite-md-rendered {
  background: white;
  display: block;
  max-width: 54rem;
  margin: 0 auto 0 38%;
  padding: 3rem;
  box-shadow: 3px 3px 6px rgba(0,0,0,0.1)
}
.ensuite-md-rendered .table-of-contents {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  width: 38%;
  background: rgb(67, 119, 51);
  color: white;
  padding: 2rem 0 2rem 1rem;
  border-right: 1px solid #888;
  display: flex;
  justify-content: flex-end;
}
.ensuite-md-rendered h2 { margin-top: 2.5rem; margin-bottom: 0.5rem; }
.ensuite-md-rendered h3 { margin-top: 1.5rem; margin-bottom: 0.5rem; }

ul { margin-left: 1em; }

p > code { font-weight: bold; color: #345 }
pre > code {
  display: block;
  border: 1px solid #888;
  padding: 0.5rem 1rem;
  margin-bottom: 1rem;
  background: rgba(255,255,255,0.5);
  box-shadow: 2px 2px 2px #888;
  overflow-x: auto;
  margin: 1rem -1rem;
}
pre > code.language-sh {
  background: #123;
  border-radius: 0;
  color: #fe0;
}
pre > code.language-typescript {
  background: #ffe;
  border-radius: 0.15rem;
}

.table-of-contents { overflow: auto }
.table-of-contents a { display: block; color: white; text-decoration: underline 1px dotted black; padding: 0.25rem 1.5rem 0.25rem }
.table-of-contents a:hover { color: black; text-decoration: underline 1px solid rgba(0,0,0,0.75); background: #fff }
.table-of-contents li { margin: 0 0 }
.table-of-contents ul { font-weight: bold; margin-left: 0; list-style: none }
.table-of-contents ul ul { font-weight: normal; margin-left: 1em }
</style>
<content class="ensuite-md-rendered">
<p><div class="table-of-contents"><ul><li><a href="#configuring">Configuring</a></li><li><a href="#connecting">Connecting</a></li><li><a href="#authentication">Authentication</a><ul><li><a href="#authenticating-with-a-fresh-wallet">Authenticating with a fresh wallet</a></li><li><a href="#authenticating-with-a-known-mnemonic">Authenticating with a known mnemonic</a></li><li><a href="#authenticating-in-the-browser-with-keplr">Authenticating in the browser with Keplr</a></li><li><a href="#authenticating-in-a-script-with-secretcli">Authenticating in a script with secretcli</a></li></ul></li><li><a href="#querying-data-from-secret-network">Querying data from Secret Network</a></li><li><a href="#authorization">Authorization</a><ul><li><a href="#using-viewing-keys">Using viewing keys</a></li><li><a href="#using-query-permits">Using query permits</a></li></ul></li><li><a href="#implementation-details">Implementation details</a><ul><li><a href="#transaction-bundling">Transaction bundling</a></li></ul></li></ul></div></p>
<h1>Fadroma: Secret Network support</h1>
<p>Fadroma's support for Secret Network is achieved in this package,
by implementing the Fadroma Agent API (<code>Chain</code>, <code>Agent</code>, <code>Bundle</code>),
as well as SN-specific features (<code>ViewingKeyClient</code>).</p>
<p>Note that this package should be kept isomorphic (see <code>@fadroma/agent</code>).
Platform-specific logic and artifacts for Secret Network also exists
in <code>@fadroma/devnet</code>.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Scrt</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@fadroma/connect&#x27;</span>
<span class="hljs-keyword">import</span> assert <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:assert&#x27;</span>
</code></pre>
<h2>Configuring</h2>
<p>Several options are exposed as environment variables.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> config = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-title class_">Config</span>()
</code></pre>
<h2>Connecting</h2>
<p>To connect to Secret Network with Fadroma, use one of the following:</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> mainnet = <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>.<span class="hljs-title function_">mainnet</span>({ <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test&#x27;</span> })
<span class="hljs-keyword">const</span> testnet = <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>.<span class="hljs-title function_">testnet</span>({ <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test&#x27;</span> })
<span class="hljs-keyword">const</span> devnet  = <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>.<span class="hljs-title function_">devnet</span>({ <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;test-scrt-devnet&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test&#x27;</span> })
<span class="hljs-keyword">const</span> mocknet = <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>.<span class="hljs-title function_">mocknet</span>({ <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test&#x27;</span> })
</code></pre>
<p>This will give you a <code>Scrt</code> instance (subclass of <code>Chain</code>):</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Chain</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@fadroma/agent&#x27;</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> chain <span class="hljs-keyword">of</span> [mainnet, testnet]) {
  assert.<span class="hljs-title function_">ok</span>(chain <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Chain</span> &amp;&amp; chain <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>)
}
</code></pre>
<h2>Authentication</h2>
<p>To interact with Secret Network, you need to authenticate as an <code>Agent</code>:</p>
<h3>Authenticating with a fresh wallet</h3>
<p>This gives you a randomly generated mnemonic.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> agent0 = <span class="hljs-keyword">await</span> mainnet.<span class="hljs-title function_">getAgent</span>().<span class="hljs-property">ready</span>

assert.<span class="hljs-title function_">ok</span>(agent0 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Agent</span>)
assert.<span class="hljs-title function_">ok</span>(agent0.<span class="hljs-property">chain</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>)
assert.<span class="hljs-title function_">ok</span>(agent0.<span class="hljs-property">mnemonic</span>)
assert.<span class="hljs-title function_">ok</span>(agent0.<span class="hljs-property">address</span>)
</code></pre>
<p>The <code>mnemonic</code> property of <code>Agent</code> will be hidden to prevent leakage.</p>
<h3>Authenticating with a known mnemonic</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> agent1 = <span class="hljs-keyword">await</span> mainnet.<span class="hljs-title function_">getAgent</span>({ <span class="hljs-attr">mnemonic</span>: <span class="hljs-string">&#x27;...&#x27;</span> }).<span class="hljs-property">ready</span>

<span class="hljs-title function_">ok</span>(agent1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Agent</span>)
<span class="hljs-title function_">ok</span>(agent1.<span class="hljs-property">chain</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Chain</span>)
<span class="hljs-title function_">ok</span>(agent1.<span class="hljs-property">mnemonic</span>)
<span class="hljs-title function_">ok</span>(agent1.<span class="hljs-property">address</span>)
</code></pre>
<h3>Authenticating in the browser with Keplr</h3>
<pre><code class="hljs language-typescript"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span>
<span class="hljs-comment">// const agent2 = await mainnet.fromKeplr().ready</span>
<span class="hljs-comment">// ok(agent2 instanceof Scrt.Agent)</span>
<span class="hljs-comment">// ok(agent2.chain instanceof Scrt.Chain)</span>
<span class="hljs-comment">// ok(agent2.mnemonic)</span>
<span class="hljs-comment">// ok(agent2.address)</span>
</code></pre>
<h3>Authenticating in a script with secretcli</h3>
<pre><code class="hljs language-typescript"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span>
<span class="hljs-comment">// const agent3 = await mainnet.fromSecretCli()</span>
<span class="hljs-comment">// ok(agent3 instanceof Scrt.Agent)</span>
<span class="hljs-comment">// ok(agent3.chain instanceof Scrt.Chain)</span>
<span class="hljs-comment">// ok(agent3.mnemonic)</span>
<span class="hljs-comment">// ok(agent3.address)</span>
</code></pre>
<h2>Querying data from Secret Network</h2>
<p>The <code>SecretJS</code> module used by a <code>ScrtChain</code> is available on the <code>SecretJS</code> property.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> chain <span class="hljs-keyword">of</span> [mainnet, testnet, devnet, mocknet]) {
  <span class="hljs-keyword">await</span> chain.<span class="hljs-property">api</span>

  <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> need mock</span>
  <span class="hljs-comment">//await chain.block</span>
  <span class="hljs-comment">//await chain.height</span>

  <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> rejects with &quot;#&lt;Object&gt;&quot; ?!</span>
  <span class="hljs-comment">// await chain.getBalance(&#x27;scrt&#x27;, &#x27;address&#x27;)</span>
  <span class="hljs-comment">// await chain.getLabel()</span>
  <span class="hljs-comment">// await chain.getCodeId()</span>
  <span class="hljs-comment">// await chain.getHash()</span>
  <span class="hljs-comment">// await chain.fetchLimits()</span>

  <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> Queries should be possible without an Agent.</span>
  assert.<span class="hljs-title function_">rejects</span>(<span class="hljs-function">()=&gt;</span>chain.<span class="hljs-title function_">query</span>())
}
</code></pre>
<p>The <code>api</code>, <code>wallet</code>, and <code>encryptionUtils</code> properties of <code>ScrtAgent</code>
expose the <code>SecretNetworkClient</code>, <code>Wallet</code>, and <code>EncryptionUtils</code> (<code>EnigmaUtils</code>)
instances.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">await</span> agent1.<span class="hljs-property">ready</span>
<span class="hljs-title function_">ok</span>(agent1.<span class="hljs-property">api</span>)
</code></pre>
<h2>Authorization</h2>
<h3>Using viewing keys</h3>
<p>Fadroma provides the <code>VKClient</code> class for embedding into your own <code>Client</code> classes
for contracts that use SNIP20-compatible the viewing keys.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-title class_">VKClient</span>()
</code></pre>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Client</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@fadroma/agent&#x27;</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Client</span> {
  vk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-title class_">VKClient</span>()
}
</code></pre>
<h3>Using query permits</h3>
<pre><code class="hljs language-typescript"><span class="hljs-comment">// TODO add docs</span>
</code></pre>
<h2>Implementation details</h2>
<h3>Transaction bundling</h3>
<p>A Secret Network-specific implementation of message bundling is included:</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">const</span> bundle = agent0.<span class="hljs-title function_">bundle</span>()
<span class="hljs-title function_">ok</span>(bundle <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Scrt</span>.<span class="hljs-property">Bundle</span>)
</code></pre>
<hr>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { ok } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:assert&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./Scrt.test.ts&#x27;</span>
</code></pre>

</content>
</body>
</html>