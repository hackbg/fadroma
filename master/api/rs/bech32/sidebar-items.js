window.SIDEBAR_ITEMS = {"enum":[["Error","Error types for Bech32 encoding / decoding"],["Variant","Used for encode/decode operations for the two variants of Bech32"]],"fn":[["convert_bits","Convert between bit sizes"],["decode","Decode a bech32 string into the raw HRP and the data bytes."],["decode_without_checksum","Decode a bech32 string into the raw HRP and the data bytes, assuming no checksum."],["encode","Encode a bech32 payload to string."],["encode_to_fmt","Encode a bech32 payload to an [fmt::Write]. This method is intended for implementing traits from [std::fmt]."],["encode_without_checksum","Encode a bech32 payload to string without the checksum."],["encode_without_checksum_to_fmt","Encode a bech32 payload without a checksum to an [fmt::Write]. This method is intended for implementing traits from [std::fmt]."]],"struct":[["Bech32Writer","Allocationless Bech32 writer that accumulates the checksum data internally and writes them out in the end."],["u5","Integer in the range `0..32`"]],"trait":[["Base32Len","Interface to calculate the length of the base32 representation before actually serializing"],["CheckBase32","A trait to convert between u8 arrays and u5 arrays without changing the content of the elements, but checking that they are in range."],["FromBase32","Parse/convert base32 slice to `Self`. It is the reciprocal of `ToBase32`."],["ToBase32","A trait for converting a value to a type `T` that represents a `u5` slice."],["WriteBase32","Interface to write `u5`s into a sink"]]};