name: Get started with Fadroma
info: |
  [**Fadroma**](https://fadroma.tech/) is a framework for building
  **decentralized applications** with Rust and TypeScript.
  Fadroma makes it easy to write [CosmWasm](https://cosmwasm.com/)
  smart contracts and integrate them into your Web app.

  Fadroma is [**free software**](https://foss.hack.bg), 
  available to the public under the [AGPLv3](href="https://www.gnu.org/licenses/agpl-3.0.txt") 
  license. This license protects user freedoms and encourages responsibility towards
  the digital commons. If this license doesn't work for your business case, email
  us at *\[hello at hack dot bg\]* to arrange for custom licensing options.
invert: true
big: left
links:
  - icon: console
    text: Installing Fadroma
    bold: true
  - icon: console
    text: Creating a project
    bold: true
  - icon: console
    text: Defining contracts
    bold: true
  - icon: todo
    text: "WIP: Dev server with dashboard"
    info: Monitor devnet state, visualize deployment contents, view test results and coverage, and perform administrative operations, from a unified local dashboard.
---
name: Supported platforms
info: |
  Presently, we support [Secret Network](https://scrt.network/),
  an open-source, permissionless blockchain, based on privacy research
  including [*Decentralizing Privacy*](https://ieeexplore.ieee.org/document/7163223).
links:
  - icon: rust
    text: fadroma::scrt
    href: ./scrt/
    bold: true
  - icon: typescript
    text: "@fadroma/scrt"
    href: ./scrt/
    bold: true
  - icon: todo
    text: "WIP: @fadroma/cw"
---
name: Write contracts
info: |
  Use attribute macros to abstract away the boilerplate.
  Compose smart contracts out of encapsulated components.
links:
  - icon: rust
    text: fadroma-proc-derive
    href: https://docs.rs/fadroma-proc-derive/latest/fadroma_proc_derive/index.html
    bold: true
  - icon: rust
    text: Example contract
    href: https://github.com/hackbg/fadroma/tree/master/examples/derive-contract-components
  - icon: rust
    text: Example contract with interface
    href: https://github.com/hackbg/fadroma/tree/master/examples/derive-contract-interface
  - icon: todo
    text: "WIP: fadroma-dsl"
    href: https://github.com/hackbg/fadroma/issues/136
    bold: true
---
name: Efficient storage
info: |
  Highly performant keyed, namepaced, and iterable data storage primitives. Conversion between human-readable Addr and storage-friendly CanonicalAddr on the struct level.
links:
  - icon: rust
    text: fadroma::storage
    href: https://docs.rs/fadroma/latest/fadroma/storage/index.html
    bold: true
  - icon: rust
    text: fadroma::core::addr
    href: https://docs.rs/fadroma/latest/fadroma/core/addr/index.html
    bold: true
  - icon: rust
    text: fadroma-derive-canonize
    href: https://docs.rs/fadroma-derive-canonize/latest/fadroma-derive-canonize/index.html
    bold: true
---
name: Do the math
info: |
  256-bit integer support in Cosmos for easy EVM interop. Generate SHA256 checksums for your data from a contract. ChaCha-based pseudo-random number generator.
links:
  - icon: rust
    text: fadroma::prelude::Uint256
    href: https://docs.rs/fadroma/latest/fadroma/prelude/struct.Uint256.html
    bold: true
  - icon: rust
    text: fadroma::crypto::sha_256
    href: https://docs.rs/fadroma/latest/fadroma/crypto/fn.sha_256.html
    bold: true
  - icon: rust
    text: fadroma::crypto::Prng
    href: https://docs.rs/fadroma/latest/fadroma/crypto/struct.Prng.html
    bold: true
---
name: Tokenomics
info: |
  Interact with fungible and non-fungible distributed tokens.
links:
  - icon: rust
    text: Embed a custom SNIP20 token into your contract
    info: An embeddable SNIP-20 implementation, for customizing token functionality, and/or embedding tokens alongside custom logic in the same contract.
    href: https://docs.rs/fadroma/latest/fadroma/scrt/snip20/contract/index.html
    bold: true
  - icon: rust
    text: Interact with SNIP20 token from your contract
    info: A struct that interfaces with a SNIP-20 token, for sending messages to tokens in fewer lines of code.
    href: https://docs.rs/fadroma/latest/fadroma/scrt/snip20/client/index.html
    bold: true
  - icon: typescript
    text: Interact with SNIP20 token from TypeScript
    href: ./tokens/
    bold: true
  - icon: todo
    text: "WIP: SNIP721 Client class"
    bold: true
  - icon: typescript
    text: TokenManager
    href: ./tokens/
    bold: true
---
name: Authorization primitives
links:
  - icon: rust
    text: Admin role
    href: https://docs.rs/fadroma/latest/fadroma/admin/index.html
    bold: true
  - icon: rust
    text: Killswitch
    info: Emergency pause and permanent termination for your contract.
    href: https://docs.rs/fadroma/latest/fadroma/killswitch/index.html
    bold: true
  - icon: rust
    text: Viewing keys
    info: Generate and use SNIP-20 compatible viewing keys in any contract.
    href: https://docs.rs/fadroma/latest/fadroma/scrt/vk/index.html
    bold: true
  - icon: typescript
    text: Viewing key client
    href: ./scrt/
    bold: true
  - icon: rust
    text: Query permits
    info: Generate and use revokable SNIP-24 query permits.
    href: https://docs.rs/fadroma/latest/fadroma/scrt/permit/index.html
    bold: true
  - icon: typescript
    text: Query permit client
    href: ./scrt/
    bold: true
---
name: Build reproducibly
info: |
  Perform production builds of your contracts in a Docker container.
link: https://github.com/hackbg/fadroma/blob/v100/spec/Build.spec.ts.md
links:
  - icon: console
    text: $ fadroma build
    href: ./devnet/
    bold: true
  - icon: typescript
    text: "@fadroma/build"
    href: ./build/
    bold: true
---
name: Define high-level API
info: Easily create a TypeScript client library for your dApp.
links:
  - icon: typescript
    text: "@fadroma/core"
    href: ./core/
    bold: true
  - icon: todo
    text: Example client
  - icon: todo
    text: Schema-based clients and validation
    info: Generate client classes and microfrontends from the JSON schema exported by contracts.
---
name: Deploy and operate
info: Manage hundreds of heterogeneous contracts using a declarative API.
links:
  - icon: typescript
    text: Writing a deploy script
    href: ./deploy/
    bold: true
  - icon: console
    text: Running a deploy script
    href: ./devnet/
    bold: true
  - icon: todo
    text: Example deploy script
  - icon: todo
    text: Contract migrations
---
name: Local devnets
info: Spawn local blockchain nodes for development and testing.
link: https://github.com/hackbg/fadroma/blob/v100/spec/Devnet.spec.ts.md
links:
  - icon: console
    text: $ fadroma devnet
    href: ./devnet/
    bold: true
  - icon: typescript
    text: "@fadroma/devnet"
    href: ./devnet/
    bold: true
  - icon: todo
    text: "WIP: Export devnet"
  - icon: todo
    text: Smart code reloading
---
name: Integration testing
info: Test the interoperation of multiple smart contracts. Quickly execute smart contracts in a simulated local environment, without waiting for block validation. Test smart contracts for edge cases using auto-generated input data.
links:
  - icon: rust
    text: fadroma::ensemble
    href: https://docs.rs/fadroma/latest/fadroma/ensemble/index.html
    bold: true
  - icon: rust
    text: Example ensemble test
    href: https://github.com/hackbg/fadroma/tree/master/examples/ensemble
  - icon: typescript
    text: "@fadroma/mocknet"
    href: ./mocknet/
    bold: true
  - icon: todo
    text: Property-based testing
  - icon: todo
    text: Gas profiling
---
name: Docker integration
info: Fadroma runs builds and devnets in containers using Docker or Podman
foss: true
link:
links:
  - icon: todo
    text: "WIP: Podman support"
  - icon: typescript
    text: "Powered by @hackbg/dock"
    href:
    bold: true
---
name: Scripting
info: Fadroma scripts are structured as ES/TS modules that export one or more commands.
foss: true
links:
  - icon: typescript
    text: "Powered by @hackbg/cmds"
    href: 
    bold: true
---
name: Configuration
info: You can configure the TypeScript subsystems of Fadroma using env vars and/or a .env file.
foss: true
links:
  - icon: typescript
    text: "Powered by @hackbg/conf"
    href: 
    bold: true
---
name: Literate programming
info: Fadroma is tested using the Ensuite documentation and testing harness for Markdown and TypeScript.
foss: true
links:
  - icon: typescript
    text: "@hackbg/ensuite"
    href: https://github.com/hackbg/ensuite
    bold: true
