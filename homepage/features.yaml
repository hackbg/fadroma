name: Get started with Fadroma
info: |
  **Fadroma** is a framework for building
  **decentralized applications** with Rust and TypeScript.
  Fadroma makes it easy to write [CosmWasm](https://cosmwasm.com/)
  smart contracts and integrate them into your Web app.

  Fadroma is [**free software**](https://foss.hack.bg), 
  available to the public under the [AGPLv3](href="https://www.gnu.org/licenses/agpl-3.0.txt") 
  license. This license protects user freedoms and encourages responsibility towards
  the digital commons. If this license doesn't work for your business case, email
  us at  *hello at hack dot bg* to arrange for custom licensing options.
invert: true
style: grid-row-start:1;grid-row-end:3;
links:
  - icon: typescript
    text: Get Fadroma
    bold: true
  - icon: typescript
    text: $ fadroma project
    bold: true
  - icon: console
    text: $ fadroma contract
    bold: true
---
big: center
name: Define contracts
info: |
  Use attribute macros to abstract away the boilerplate.
  Compose smart contracts out of encapsulated components.
links:
  - icon: rust
    text: fadroma-dsl
    href: https://docs.rs/fadroma-proc-derive/latest/fadroma_proc_derive/index.html
    bold: true
  - icon: rust
    text: Example contract
    href: https://github.com/hackbg/fadroma/tree/master/examples/derive-contract-components
  - icon: rust
    text: Example contract with interface
    href: https://github.com/hackbg/fadroma/tree/master/examples/derive-contract-interface
---
name: Define client API
info: Easily create a TypeScript client library for your dApp.
links:
  - icon: typescript
    text: "@fadroma/core"
    href: ./core/
    bold: true
  - icon: typescript
    text: Example client
    href:
---
name: Build reproducibly
info: Perform production builds of your contracts in a Docker container.
link: https://github.com/hackbg/fadroma/blob/v100/spec/Build.spec.ts.md
links:
  - icon: console
    text: $ fadroma build
    href: ./devnet/
    bold: true
  - icon: typescript
    text: "@fadroma/build"
    href: ./build/
    bold: true
---
name: Deploy and operate
info: Manage hundreds of heterogeneous contracts using a declarative API.
links:
  - icon: console
    text: $ fadroma deploy
    href: ./devnet/
    bold: true
  - icon: typescript
    text: "@fadroma/deploy"
    href: ./deploy/
    bold: true
---
name: Local devnets
info: Spawn local blockchain nodes for development and testing.
link: https://github.com/hackbg/fadroma/blob/v100/spec/Devnet.spec.ts.md
links:
  - icon: console
    text: $ fadroma devnet
    href: ./devnet/
    bold: true
  - icon: typescript
    text: "@fadroma/devnet"
    href: ./devnet/
    bold: true
---
name: Docker integration
info: Fadroma runs builds and devnets in containers using Docker or Podman
foss: true
link:
links:
  - icon: typescript
    text: "@hackbg/dock"
    href:
    bold: true
  - icon: todo
    text: Podman support
---
name: Scripting
info: Fadroma scripts are structured as ES/TS modules that export one or more commands.
foss: true
links:
  - icon: typescript
    text: "@hackbg/cmds"
    href: 
    bold: true
---
name: Integration testing
info: Test multiple interoperating smart contracts using a Rust API.
links:
  - icon: rust
    text: fadroma::ensemble
    href: https://docs.rs/fadroma/latest/fadroma/ensemble/index.html
    bold: true
  - icon: rust
    text: Example integration test
    href: https://github.com/hackbg/fadroma/tree/master/examples/ensemble
---
name: Configuration
info: You can configure the TypeScript subsystems of Fadroma using env vars and/or a .env file.
foss: true
links:
  - icon: typescript
    text: "@hackbg/conf"
    href: 
    bold: true
---
name: Mocknet
info: Quickly execute smart contracts in a simulated local environment, without waiting for block validation.
links:
  - icon: typescript
    text: "@fadroma/mocknet"
    href: ./mocknet/
    bold: true
---
name: Property-based testing
info: Test smart contracts for edge cases using auto-generated input data.
link:
todo: true
---
name: Literate programming
info: Fadroma is tested using the Ensuite documentation and testing harness for Markdown and TypeScript.
foss: true
links:
  - icon: typescript
    text: "@hackbg/ensuite"
    href: https://github.com/hackbg/ensuite
    bold: true
---
name: Store state efficiently
info: Highly performant keyed, namepaced, and iterable data storage primitives.
links:
  - icon: rust
    text: fadroma::storage
    href: https://docs.rs/fadroma/latest/fadroma/storage/index.html
    bold: true
---
name: Query permits
info: Generate and use revokable SNIP-24 query permits.
links:
  - icon: rust
    text: fadroma::scrt::permit
    href: https://docs.rs/fadroma/latest/fadroma/scrt/permit/index.html
    bold: true
  - icon: typescript
    text: "@fadroma/scrt"
    href: ./scrt/
    bold: true
---
name: Viewing keys
info: Generate and use SNIP-20 compatible viewing keys in any contract.
links:
  - icon: rust
    text: fadroma::scrt::vk
    href: https://docs.rs/fadroma/latest/fadroma/scrt/vk/index.html
    bold: true
  - icon: typescript
    text: "@fadroma/scrt"
    href: ./scrt/
    bold: true
---
name: SNIP20
info: An embeddable SNIP-20 implementation, for customizing token functionality, and/or embedding tokens alongside custom logic in the same contract.
links:
  - icon: rust
    text: fadroma::scrt::snip20::contract
    href: https://docs.rs/fadroma/latest/fadroma/scrt/snip20/contract/index.html
    bold: true
---
name: ISNIP20
info: A struct that interfaces with a SNIP-20 token, for sending messages to tokens in fewer lines of code.
links:
  - icon: rust
    text: fadroma::scrt::snip20::client
    href: https://docs.rs/fadroma/latest/fadroma/scrt/snip20/client/index.html
    bold: true
  - icon: typescript
    text: "@fadroma/tokens"
    href: ./tokens/
    bold: true
---
name: 256-bit arithmetic
info: 256-bit integer support in Cosmos for easy EVM interop.
links:
  - icon: rust
    text: fadroma::prelude::Uint256
    href: https://docs.rs/fadroma/latest/fadroma/prelude/struct.Uint256.html
    bold: true
---
name: Address conversion
info: Conversion between human-readable Addr and storage-friendly CanonicalAddr on the struct level.
links:
  - icon: rust
    text: fadroma::core:addr
    href: https://docs.rs/fadroma/latest/fadroma/core/addr/index.html
    bold: true
  - icon: rust
    text: fadroma-derive-canonize
    href: https://docs.rs/fadroma-derive-canonize/latest/fadroma-derive-canonize/index.html
    bold: true
---
name: On-chain checksums
info: Generate SHA256 checksums for your data from a contract.
links:
  - icon: rust
    text: fadroma::crypto::sha_256
    href: https://docs.rs/fadroma/latest/fadroma/crypto/fn.sha_256.html
    bold: true
---
name: Randomness source
info: ChaCha-based pseudo-random number generator.
links:
  - icon: rust
    text: fadroma::crypto::sha_256
    href: https://docs.rs/fadroma/latest/fadroma/crypto/struct.Prng.html
    bold: true
---
name: Contract admin role
info: Allow a privileged user to perform administrative operations. Single-step and two-step transfer of admin role.
big:  left
links:
  - icon: rust
    text: fadroma::admin
    href: https://docs.rs/fadroma/latest/fadroma/admin/index.html
    bold: true
---
name: Killswitch
info: Emergency pause and permanent termination for your contract.
big:  right
links:
  - icon: rust
    text: fadroma::killswitch
    href: https://docs.rs/fadroma/latest/fadroma/killswitch/index.html
    bold: true
---
name: Transaction log
info: Keep track of uploads, instantiations, and configuration.
link:
big:  left
---
name: Smart transaction bundling
info: Execute multiple messages in a single transaction or query.
link: https://github.com/hackbg/fadroma/blob/v100/spec/Bundle.spec.ts.md
docs:
  ts: ./core/#bundle
---
name: Schema-based clients
info: Generate client classes and microfrontends from the JSON schema exported by contracts.
link:
todo:
---
name: Development dashboard
info: Monitor devnet state, visualize deployment contents, view test results and coverage, and perform administrative operations, from a unified local dashboard.
link:
big:  center
todo:
---
name: Smart code reloading
info: Automatically redeploy contracts on changes to source code.
link:
todo:
---
name: Privacy-preserving migrations
info: Allow your users to migrate their private state to newer versions of deployed contracts.
link:
todo:
