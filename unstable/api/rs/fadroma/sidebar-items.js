window.SIDEBAR_ITEMS = {"macro":[["entrypoint","Define the `mod wasm` entrypoint of production builds."],["impl_canonize_default",""],["impl_contract_harness_default","Implement ContractHarness for the harness struct. Use this to enable Fadroma Ensemble for a contract."],["make_composable","Implement the Composable Core for a `struct { storage, api, querier }`"],["stateful","Because Rust canâ€™t yet genericize over mutability, this macro can be used to implement the same readonly methods twice - once for `&S` and for `&mut S`."],["with_status","Wrap status levels around the `match` statement that does your handle dispatch."]],"mod":[["admin","Feature flag: `admin` Transaction authentication by pre-configured admin address."],["composability","Feature flag: `composability` Modular contracts using native trait composition."],["core",""],["ensemble","Feature flag: `ensemble` Configurable integration testing harness."],["killswitch","Feature flag: `killswitch` Emergency pause and termination of contracts."],["math","256-bit arithmetic, checksums and pseudo-random numbers."],["permit","Feature flag: `permit` Authentication using SNIP-24 query permits."],["prelude","Start here. `use fadroma::prelude::*` to get the essentials for writing smart contracts with Fadroma."],["response","Build InitResponse and HandleResponse using expressions."],["snip20_client","Feature flag: `snip20-client` Command SNIP-20 tokens from a contract."],["snip20_impl","Feature flag: `snip20-impl` Customizable implementation of a SNIP-20 token."],["storage","Utilities for interacting with the native key-value storage."],["vk","Feature flag: `vk` Viewing key authentication."]]};