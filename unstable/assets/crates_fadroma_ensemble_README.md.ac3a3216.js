import{_ as s,c as n,o as a,a as l}from"./app.66afa4f2.js";const i=JSON.parse('{"title":"Fadroma Ensemble","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Getting started","slug":"getting-started"},{"level":3,"title":"ContractHarness","slug":"contractharness"},{"level":3,"title":"ContractEnsemble","slug":"contractensemble"},{"level":3,"title":"Simulating blocks","slug":"simulating-blocks"}],"relativePath":"crates/fadroma/ensemble/README.md","lastUpdated":1658115998000}'),o={name:"crates/fadroma/ensemble/README.md"},p=l(`<h1 id="fadroma-ensemble" tabindex="-1">Fadroma Ensemble <a class="header-anchor" href="#fadroma-ensemble" aria-hidden="true">#</a></h1><p><img src="https://img.shields.io/badge/version-0.1.0-blueviolet" alt=""></p><p><strong>How to write multi-contract CosmWasm integration tests in Rust using <code>fadroma-ensemble</code></strong></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Fadroma Ensemble provides a way to test multi-contract interactions without having to deploy contracts on-chain.</p><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>To start testing with ensemble <code>ContractHarness</code> has to be implemented for each contract and registered by the <code>ContractEnsemble</code>. This approach allows a lot of flexibility for testing contracts. Mock implementations can be created, contract methods can be overridden, <code>Bank</code> interactions are also possible.</p><h3 id="contractharness" tabindex="-1">ContractHarness <a class="header-anchor" href="#contractharness" aria-hidden="true">#</a></h3><p><code>ContractHarness</code> defines entrypoints to any contract: <code>init</code>, <code>handle</code>, <code>query</code>. In order to implement contract we can use <code>DefaultImpl</code> from existing contract code, or override contract methods.</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Here we create a ContractHarness implementation for an Oracle contract</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> path</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">to</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contracts</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Oracle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ContractHarness</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Oracle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Use the method from the default implementation</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MockDeps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Binary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">InitResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            deps</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            env</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">from_binary</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">)?,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">DefaultImpl</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MockDeps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Binary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HandleResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            deps</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            env</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">from_binary</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">)?,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">DefaultImpl</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Override with some hardcoded value for the ease of testing</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">MockDeps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Binary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Binary</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">from_binary</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">match</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">GetPrice</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> base_symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">to_binary</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#82AAFF;">Uint128</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1_000_000_000</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // don&#39;t override the rest</span></span>
<span class="line"><span style="color:#A6ACCD;">            _ </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">deps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">from_binary</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">)?,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">DefaultImpl</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="contractensemble" tabindex="-1">ContractEnsemble <a class="header-anchor" href="#contractensemble" aria-hidden="true">#</a></h3><p><code>ContractEnsemble</code> is the centerpiece that takes care of managing contract storage and bank state and executing messages between contracts. Currently, supported messages are <code>CosmosMsg::Wasm</code> and <code>CosmosMsg::Bank</code>. It exposes methods like <code>register</code> for registering contract harnesses and <code>instantiate</code>, <code>execute</code>, <code>query</code> for interacting with contracts and methods to inspect/alter the raw storage if needed. Just like on the blockchain, if any contract returns an error during exection, all state is reverted.</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">test</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_query_price</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> ensemble </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ContractEnsemble</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // register contract</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> oracle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Oracle</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // instantiate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> oracle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiate</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        oracle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&amp;{},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">MockEnv</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">ContractLink</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                address</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">oracle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                code_hash</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> oracle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code_hash</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // query</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">GetPrice</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> price </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        oracle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">oracle</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">GetPrice</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> base_symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SCRT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">into </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">assert_eq!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">price</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint128</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1_000_000_000</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="simulating-blocks" tabindex="-1">Simulating blocks <a class="header-anchor" href="#simulating-blocks" aria-hidden="true">#</a></h3><p>Since the ensemble is designed to simulate a blockchain environment it maintains an idea of block height and time. Block height increases automatically with each successful call to execute and instantiate messages (<strong>sub-messages don&#39;t trigger this behaviour</strong>). It is possible to configure as needed: blocks can be incremented by a fixed amount or by a random value within a provided range. In addition, the current block can be frozen so subsequent calls will not modify it if desired.</p><p>Set the block height manually:</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> ensemble </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ContractEnsemble</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">block_mut</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">height </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">block_mut</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Use auto-increments (after each <strong>successful</strong> call) for block height and time when initializing the ensemble:</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// For exact increments</span></span>
<span class="line"><span style="color:#A6ACCD;">ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">block_mut</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">exact_increments</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// For random increments within specified ranges</span></span>
<span class="line"><span style="color:#A6ACCD;">ensemble</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">block_mut</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">random_increments</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">..</span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">..</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div>`,19),e=[p];function t(c,r,F,D,y,C){return a(),n("div",null,e)}var d=s(o,[["render",t]]);export{i as __pageData,d as default};
