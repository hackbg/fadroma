import{_ as s,c as a,o as n,a as o}from"./app.b18454ba.js";const C=JSON.parse('{"title":"Deploying and configuring smart contracts with Fadroma Ops","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example: deploying a contract","slug":"example-deploying-a-contract"},{"level":3,"title":"TypeScript","slug":"typescript"},{"level":2,"title":"How to define commands","slug":"how-to-define-commands"},{"level":3,"title":"Commands","slug":"commands"},{"level":2,"title":"How to deploy contracts","slug":"how-to-deploy-contracts"},{"level":3,"title":"Receipts","slug":"receipts"},{"level":2,"title":"Templates and factories","slug":"templates-and-factories"},{"level":3,"title":"Example: deploying a factory contract with a template","slug":"example-deploying-a-factory-contract-with-a-template"},{"level":2,"title":"Deploying in bulk","slug":"deploying-in-bulk"},{"level":2,"title":"Class-based deployments","slug":"class-based-deployments"}],"relativePath":"guide/ops.md","lastUpdated":1663865535000}'),e={name:"guide/ops.md"},l=o(`<h1 id="deploying-and-configuring-smart-contracts-with-fadroma-ops" tabindex="-1">Deploying and configuring smart contracts with Fadroma Ops <a class="header-anchor" href="#deploying-and-configuring-smart-contracts-with-fadroma-ops" aria-hidden="true">#</a></h1><p>The following is a guide to understanding and using the smart contract deployment system, Fadroma Ops.</p><h2 id="example-deploying-a-contract" tabindex="-1">Example: deploying a contract <a class="header-anchor" href="#example-deploying-a-contract" aria-hidden="true">#</a></h2><ul><li><code>project/package.json</code>:</li></ul><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fadroma</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.0.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>project/ops.ts</code>:</li></ul><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env fadroma-deploy</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Fadroma </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@hackbg/fadroma</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Project</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fadroma</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deploy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">command</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deploy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deploy an instance of my-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">info(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Deploying...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">contract(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyContract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">deploy(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">status</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">command</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">status</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">print status of deployed contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">info(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Querying status...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contract</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">contract(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyContract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">get(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Deploy the contract first.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">populate()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">debug(</span><span style="color:#A6ACCD;">contract</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> Project</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/** add more commands here */</span></span>
<span class="line"></span></code></pre></div><ul><li>run with <code>npx fadroma &lt;SCRIPT&gt; &lt;COMMAND&gt; &lt;ARGUMENTS&gt;</code></li></ul><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">npx fadroma ops.ts deploy</span></span>
<span class="line"><span style="color:#A6ACCD;">npx fadroma ops.ts status</span></span>
<span class="line"></span></code></pre></div><ul><li>or add to <code>package.json</code> scripts to run with e.g. <code>npm run ops</code>:</li></ul><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">ops</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fadroma ops.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><h3 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h3><p>Fadroma will use <a href="https://github.com/hackbg/ganesha" target="_blank" rel="noreferrer">Ganesha</a> to compile deployment scripts on each run. You can use TypeScript seamlessly in your deploy procedures.</p></div><h2 id="how-to-define-commands" tabindex="-1">How to define commands <a class="header-anchor" href="#how-to-define-commands" aria-hidden="true">#</a></h2><p>The <strong>Commands#command(name, info, ...steps)</strong> method declares commands.</p><ul><li><strong>name</strong> is the string used to invoke the command from the shell</li><li><strong>info</strong> is a short help description</li><li><strong>...steps</strong> is one or more synchronous or asynchronous functions that constitute the command.</li></ul><p><strong>Steps</strong> are run sequentially. The first argument to each step is a <code>context: DeployContext</code>. If a step returns an <code>Object</code>, the object&#39;s entries are added to the <code>context</code> for subsequent steps.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><h3 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-hidden="true">#</a></h3><ul><li>The <code>commands.command(...)</code> method returns <code>commands</code>, so it supports chaining.</li><li>Don&#39;t forget to <code>export default commands</code>, otherwise Fadroma will not be able to find the commands.</li><li>Fadroma uses <a href="https://github.com/hackbg/toolbox/blob/main/komandi/komandi.ts" target="_blank" rel="noreferrer"><code>@hackbg/komandi</code></a> to parse commands. This is a simple and loose command parser which does not support flags. Arguments to a command are available in <code>context.args</code> so you can define your own flags.</li></ul></div><h2 id="how-to-deploy-contracts" tabindex="-1">How to deploy contracts <a class="header-anchor" href="#how-to-deploy-contracts" aria-hidden="true">#</a></h2><p>The <code>context.contract(name, Client?)</code> method, which returns a <code>ContractSlot</code> - a placeholder representing a contract that might or might not already be deployed. You can optionally specify a custom <code>Client</code> class used to interact with the deployed contract.</p><ul><li><code>await context.contract(name, Client?).getOrDeploy(source, init)</code> is the most handy method of <code>ContractSlot</code>: if a contract is found by <code>name</code> in the current deployment, it returns that; otherwise, it deploys <code>source</code> with the specified <code>init</code> message and auto-generated label.</li><li><code>await context.contract(name, Client?).deploy(source, init)</code> deploys a contract from <code>source</code> with the specified <code>init</code> msg and an auto-generated label; but if a contract with the same label already exists on the chain, the call will fail.</li><li><code>context.contract(name, Client?).get(message)</code> looks up a contract by <code>name</code> in the current deployment; if the contract is not found in the deployment, <code>message</code> is thrown.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><h3 id="receipts" tabindex="-1">Receipts <a class="header-anchor" href="#receipts" aria-hidden="true">#</a></h3><p>The <strong>deployment receipt system</strong> keeps track of the addresses, code ids, code hashes, and other info about the smart contracts that you deployed, in the form of files under <code>receipts/$CHAIN_ID/$DEPLOYMENT.yml</code>.</p><p>Besides <code>context.contract.get()</code> and <code>.getOrDeploy()</code>, you can access it directly via:</p><ul><li><code>context.deployment: Deployment</code>: handle to currently selected deployment.</li><li><code>context.deployments: Deployments</code>: deployment directory for current project and chain, listing other deployments.</li></ul><p>The deployments system prefixes all contract labels with the name of the deployment. This is because labels are expected to be both meaningful and globally unique.</p><ul><li><p>So if you <code>name</code> your contracts <code>ALICE</code> and <code>BOB</code>, and your deployment is called <code>20220706</code>, the on-chain labels of the contracts will be <code>20220706/ALICE</code> and <code>20220706/BOB</code>.</p></li><li><p>The timestamp here corresponds to the moment the deployment was created, and not the moment when a particular contract was deployed. You can get the latter by looking at <code>initTx</code> in the deployment receipt, and querying that transaction in the transaction explorer.</p></li><li><p>We recommend that you keep receipts of your primary mainnet and testnet deployments in your VCS system, in order to keep track of your project&#39;s footprint on public networks.</p></li></ul></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>init</code> can be either an init message, or a function returning an init message.</p><p>This is useful when there is <a href="#templates-and-factories">extra preparation</a> needed when deploying a contract, but you don&#39;t want to repeat those steps if the contract is already deployed.</p></div><h2 id="templates-and-factories" tabindex="-1">Templates and factories <a class="header-anchor" href="#templates-and-factories" aria-hidden="true">#</a></h2><p>Sometimes you want to upload a contract to the chain, but not instantiate it. For example, one of your contracts serves a factory and deploys new instances of another contract. Fadroma calls a contract in that state (deployed, but not instantiated) a <code>Template</code>. It doesn&#39;t have an <code>address</code>, just an <code>id</code> and <code>codeHash</code> that can be used to instantiate it.</p><p>You can use the <code>context.template(source)</code> method to get a <code>TemplateSlot</code> representing a template; similar to <code>ContractSlot</code>, its methods are <code>get(message)</code>, <code>async upload()</code> and <code>async getOrUpload()</code>.</p><h3 id="example-deploying-a-factory-contract-with-a-template" tabindex="-1">Example: deploying a factory contract with a template <a class="header-anchor" href="#example-deploying-a-factory-contract-with-a-template" aria-hidden="true">#</a></h3><p>The following function only deploys the factory context if it&#39;s not already deployed, and uploads its template only if needed.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">idempotentlyDeployFactoryAndTemplate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contract</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Factory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOrDeploy</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">factory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">codeHash</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">template</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">product</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOrUpload</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> code_hash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">codeHash</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="deploying-in-bulk" tabindex="-1">Deploying in bulk <a class="header-anchor" href="#deploying-in-bulk" aria-hidden="true">#</a></h2><p>Sometimes it is useful to deploy multiple contracts in a single transaction.</p><ul><li><code>context.contracts(Client?).deployMany(source, inits: [name, init][])</code> deploys multiple instances of the same <code>source</code>, each with a different <code>name</code> and <code>init</code>.</li><li><code>context.templates([template1, template2]).uploadMany()</code> uploads multiple different templates, as in the case when a factory contract is able to instantiate multiple different contracts.</li></ul><h2 id="class-based-deployments" tabindex="-1">Class-based deployments <a class="header-anchor" href="#class-based-deployments" aria-hidden="true">#</a></h2><p>More complex deployments (such as that of a whole subsystem consisting of multiple contracts) can be expressed as classes, by inheriting from <code>Fadroma.DeployTask</code>.</p><p>The semantics of class-based deployments approach a declarative workflow: by using <code>this.task</code> to wrap the individual stages of the deployment and awaiting the result of the deployment in the main function defined in the constructor, the structure of the deployment procedure becomes a directed acyclic graph.</p><p>In other words:</p><ul><li>Subtasks only execute when <code>await</code>ed.</li><li>Subtasks can <code>await</code> each other to define inter-contract dependencies as well as dependencies on other data sources.</li><li>Instances of <code>DeployTask</code> can also be <code>await</code>ed, returning an object the ultimate result of the deployment.</li></ul><p>Here&#39;s an example script containing one class-based deployment procedure:</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env fadroma-deploy</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Fadroma </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@hackbg/fadroma</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FadromaCommands</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deploy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">command</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">group</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deploy multiple interdependent contracts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> DeployPair</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">run)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DeployPair</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DeployTask</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">Fadroma</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fadroma</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Client</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">contract1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">contract2</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">contract1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">contract</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Contract1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">getOrDeploy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contract-1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">contract2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">contract</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Contract2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">getOrDeploy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contract-2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">contract1)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asLink</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,38),p=[l];function t(c,r,y,i,d,D){return n(),a("div",null,p)}const A=s(e,[["render",t]]);export{C as __pageData,A as default};
