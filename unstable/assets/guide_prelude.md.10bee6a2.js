import{_ as s,c as a,o as n,a as o}from"./app.66afa4f2.js";const A=JSON.parse('{"title":"Elements of Fadroma smart contracts","description":"","frontmatter":{},"headers":[{"level":2,"title":"Examples","slug":"examples"},{"level":2,"title":"Create a subdirectory","slug":"create-a-subdirectory"},{"level":2,"title":"Write the crate manifest","slug":"write-the-crate-manifest"},{"level":2,"title":"Import the prelude","slug":"import-the-prelude"},{"level":2,"title":"Define the API","slug":"define-the-api"},{"level":2,"title":"Implement the handlers","slug":"implement-the-handlers"},{"level":2,"title":"Add the entry point","slug":"add-the-entry-point"}],"relativePath":"guide/prelude.md","lastUpdated":1658125950000}'),l={name:"guide/prelude.md"},p=o(`<h1 id="elements-of-fadroma-smart-contracts" tabindex="-1">Elements of Fadroma smart contracts <a class="header-anchor" href="#elements-of-fadroma-smart-contracts" aria-hidden="true">#</a></h1><p>CosmWasm contracts are simply WASM programs that run in a specific environment defined by the Cosmos runtime. This environment has the well-known blockchain features of being:</p><ul><li><strong>Append-only:</strong> every mutation is permanent.</li><li><strong>Distributed:</strong> it doesn&#39;t matter on whose server the program runs.</li><li><strong>Metered:</strong> mutations cost gas, paid in the chain&#39;s native token.</li></ul><p>Coming from an OOP background, it might be helpful to view smart contract programs as something like classes, and smart contract instances as globally persistent instances of those classes.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><p>Some simple single-file contracts can be seen at:</p><ul><li><a href="https://github.com/hackbg/fadroma/tree/v100/examples/echo" target="_blank" rel="noopener noreferrer">https://github.com/hackbg/fadroma/tree/v100/examples/echo</a></li><li><a href="https://github.com/hackbg/fadroma/tree/v100/examples/kv" target="_blank" rel="noopener noreferrer">https://github.com/hackbg/fadroma/tree/v100/examples/kv</a></li></ul><p>What follows is a step-by-step guide for adding a contract to your project, with explanations of what role each step fulfills.</p><h2 id="create-a-subdirectory" tabindex="-1">Create a subdirectory <a class="header-anchor" href="#create-a-subdirectory" aria-hidden="true">#</a></h2><p>Each Fadroma contract is a Rust crate, and exists in a separate subdirectory of your project.</p><div class="language-shell"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># in &quot;my-project&quot; directory:</span></span>
<span class="line"><span style="color:#A6ACCD;">mkdir -p contracts/my-contract</span></span>
<span class="line"></span></code></pre></div><p>Add it to your project&#39;s global <code>Cargo.toml</code>:</p><div class="language-toml"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># my-project/Cargo.toml</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">workspace</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">members </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">contracts/my-contract</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="write-the-crate-manifest" tabindex="-1">Write the crate manifest <a class="header-anchor" href="#write-the-crate-manifest" aria-hidden="true">#</a></h2><p>The first thing a Rust crate needs is a <code>Cargo.toml</code>.</p><div class="language-toml"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># my-project/contracts/my-contract/Cargo.toml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">package</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">name    </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-contract</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.1.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">edition </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2018</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">lib</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">crate-type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cdylib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rlib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">path       </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_contract.rs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">fadroma </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">100.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">serde   </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.103</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> default-features </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> features </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">derive</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>We deviate from Rust&#39;s recommendation of having a <code>src/</code> subdirectory, so as not to overcomplicate the directory structure of projects.</p></blockquote><h2 id="import-the-prelude" tabindex="-1">Import the prelude <a class="header-anchor" href="#import-the-prelude" aria-hidden="true">#</a></h2><p>Now, let&#39;s write some Rust!</p><p>Each Fadroma contract consists of one or more <strong>Rust source files</strong> that define the interface and implementation.</p><p>The <code>fadroma::prelude</code> module exposes the underlying platform&#39;s native libraries, as well as useful Fadroma primitives.</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* my-project/contracts/my-contract/my_contract.rs */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> fadroma</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">prelude</span><span style="color:#89DDFF;">::*;</span></span>
<span class="line"></span></code></pre></div><h2 id="define-the-api" tabindex="-1">Define the API <a class="header-anchor" href="#define-the-api" aria-hidden="true">#</a></h2><p>The API of a smart contract consists of 3 types of messages:</p><ul><li><strong>The init message</strong> corresponds to the &quot;constructor&quot; of the &quot;class&quot;. It is called once, when instantiating the contract, and is represented by a <code>struct</code>, not an <code>enum</code>, because it has no variants.</li><li><strong>The handle messages</strong> are represented by an <code>enum</code> corresponding to the &quot;methods&quot; of the &quot;class&quot;. These methods are called from transactions, and they are always written to the blockchain. Therefore, they cost gas, and can mutate the contract state.</li><li><strong>The query messages</strong> are represented by an <code>enum</code> corresponding to &quot;getters&quot;. You can pass parameters to them, and they can read from the contract state, but they can&#39;t perform mutations, and, unlike init and handle, don&#39;t have access to the <code>env</code> struct which contains info such as the sender address and the current time.</li></ul><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* my-project/contracts/my-contract/my_contract.rs (continued) */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InitMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* init fields - your &quot;constructor arguments&quot; */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HandleMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Tx1</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">                      // &quot;tx1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Tx2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Uint128</span><span style="color:#89DDFF;">),</span><span style="color:#676E95;font-style:italic;">             // {&quot;tx2&quot;:&quot;12345&quot;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Tx3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#676E95;font-style:italic;">                   // {&quot;tx3:{}},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Tx4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> my_value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Uint128</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // {&quot;tx4&quot;:{&quot;my_value&quot;:&quot;12345&quot;}}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Q1</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">                      // &quot;q1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Q2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Uint128</span><span style="color:#89DDFF;">),</span><span style="color:#676E95;font-style:italic;">             // {&quot;q2&quot;:&quot;12345&quot;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Q3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#676E95;font-style:italic;">                   // {&quot;q3:{}},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Q4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> my_value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Uint128</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // {&quot;q4&quot;:{&quot;my_value&quot;:&quot;12345&quot;}}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="implement-the-handlers" tabindex="-1">Implement the handlers <a class="header-anchor" href="#implement-the-handlers" aria-hidden="true">#</a></h2><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* my-project/contracts/my-contract/my_contract.rs (continued) */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Storage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Querier</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Extern</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InitMsg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">InitResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* implementation of your init procedure */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Storage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Querier</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">    _deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Extern</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> _env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HandleMsg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HandleResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* dispatch and implement transactions */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Storage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Querier</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">    _deps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">Extern</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Q</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StdResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Binary</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* dispatch and implement queries */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="add-the-entry-point" tabindex="-1">Add the entry point <a class="header-anchor" href="#add-the-entry-point" aria-hidden="true">#</a></h2><p>The <code>fadroma::entrypoint!</code> macro binds the <code>init</code>, <code>handle</code>, and <code>query</code> to the CosmWasm environment. When building for production, it defines a hidden <code>mod wasm</code> module that calls the functions with the transaction data passed by the user.</p><div class="language-rust"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* my-project/contracts/my-contract/my_contract.rs (continued) */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">fadroma</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">entrypoint!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fadroma</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> init</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handle</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> query</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div>`,31),e=[p];function t(r,c,y,F,D,i){return n(),a("div",null,e)}var d=s(l,[["render",t]]);export{A as __pageData,d as default};
